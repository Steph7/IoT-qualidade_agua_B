version: "3.7"
services:
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - monitoring  # Certifique-se de usar a mesma rede para todos os serviços

  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb-exporter
    environment:
      MONGODB_URI: mongodb://mongo:27017  # Conectando ao serviço mongo
    ports:
      - "9216:9216"
    networks:
      - monitoring  # A mesma rede que o mongo

  data_collector:
    build:
      context: .  # O diretório atual onde o Dockerfile está localizado
    command: python /app/venv/src/data_collector_agua_v2.py  # Sobrescreve o comando padrão, caso queira
    container_name: data_collector
    volumes:
      - .:/app  # Monta o diretório local dentro do contêiner em /app
    networks:
      - monitoring
    depends_on:
      - mongo 

  data_processor:
    build:
      context: .  # O diretório atual onde o Dockerfile está localizado
    command: python /app/venv/src/data_processor_agua_v2.py  # Sobrescreve o comando padrão, caso queira
    container_name: data_processor
    volumes:
      - .:/app  # Monta o diretório local dentro do contêiner em /app
    networks:
      - monitoring
    depends_on:
      - data_collector  
      - mongo 

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring  # A mesma rede que o mongo

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring  # A mesma rede que o mongo

networks:
  monitoring:
    driver: bridge  # Rede compartilhada entre todos os serviços
